---
import BaseLayout from '@/layouts/BaseLayout.astro';
import ContentHeader from '@/components/ContentHeader.astro';
import Card from '@/components/Card.astro';
import BaseLink from '@/components/BaseLink.astro';
---
<BaseLayout 
    title="Dockerized F5 VPN Solution"
    description="A technical deep-dive into containerizing the F5 BIG-IP APM client for streamlined and secure intranet access."
>
    <!-- Use the existing ContentHeader for the main title -->
    <ContentHeader
        title="Dockerized F5 VPN Solution"
        description="A technical deep-dive into containerizing the F5 BIG-IP APM client for streamlined and secure intranet access."
    />

    <!-- Create a Scrollspy Navigation Header, like on the math page -->
    <header class="bg-white/80 dark:bg-slate-900/80 backdrop-blur-lg sticky top-[72px] z-40 border-b dark:border-slate-700 -mx-4 px-4 mb-12">
        <div class="container mx-auto flex justify-center items-center py-3">
            <nav class="flex flex-wrap justify-center items-center gap-x-4 sm:gap-x-6 text-sm sm:text-base">
                <a href="#challenge" class="nav-link active">The Challenge</a>
                <a href="#architecture" class="nav-link">Architecture</a>
                <a href="#implementation" class="nav-link">Implementation</a>
                <a href="#troubleshooting" class="nav-link">Troubleshooting</a>
            </nav>
        </div>
    </header>

    <!-- Main Content Sections -->
    <div class="max-w-4xl mx-auto prose dark:prose-invert prose-lg space-y-12">

        <section id="challenge">
            <h2 class="!text-3xl !mb-6">The Challenge: Why F5 is Different</h2>
            <p>Containerizing the F5 BIG-IP APM client requires understanding its unique characteristics. Unlike modern tools, it is not a simple command-line utility and presents several technical hurdles on systems like Ubuntu 24.04 LTS.</p>
            <div class="not-prose grid grid-cols-1 md:grid-cols-3 gap-4 my-8 text-center">
                <div class="p-4 bg-red-100 dark:bg-red-900/50 rounded-lg shadow"><strong class="text-red-800 dark:text-red-200">GUI-Dependent</strong><p class="text-sm text-red-700 dark:text-red-300">Requires a graphical environment.</p></div>
                <div class="p-4 bg-yellow-100 dark:bg-yellow-900/50 rounded-lg shadow"><strong class="text-yellow-800 dark:text-yellow-200">Legacy Libraries</strong><p class="text-sm text-yellow-700 dark:text-yellow-300">Depends on `libxml2.so.2`.</p></div>
                <div class="p-4 bg-blue-100 dark:bg-blue-900/50 rounded-lg shadow"><strong class="text-blue-800 dark:text-blue-200">Bundled Runtimes</strong><p class="text-sm text-blue-700 dark:text-blue-300">Requires careful dependency handling.</p></div>
            </div>
        </section>

        <section id="architecture">
            <h2 class="!text-3xl !mb-6">Architectural Decision: VNC vs. X11</h2>
            <p>The core architectural choice is how to provide a GUI from a headless container. We strongly recommend the VNC approach for its robustness and portability over the brittle, platform-dependent X11 forwarding method.</p>
            <div class="not-prose grid md:grid-cols-2 gap-6 my-8">
                <div class="border border-red-300 dark:border-red-700 rounded-lg p-6 bg-red-50 dark:bg-red-900/30">
                    <h3 class="text-xl font-bold text-red-800 dark:text-red-200">X11 Forwarding</h3>
                    <p class="text-red-700 dark:text-red-300 mt-2">Directly forwards the container's display to the host. Incurs high setup complexity and security risks.</p>
                </div>
                <div class="border border-green-300 dark:border-green-700 rounded-lg p-6 bg-green-50 dark:bg-green-900/30">
                    <h3 class="text-xl font-bold text-green-800 dark:text-green-200">VNC / noVNC (Recommended)</h3>
                    <p class="text-green-700 dark:text-green-300 mt-2">Runs a virtual display inside the container, making it accessible from any modern web browser.</p>
                </div>
            </div>
        </section>

        <section id="implementation">
            <h2 class="!text-3xl !mb-6">Implementation Highlights</h2>
            <p>The solution is built in four key stages within the Dockerfile and entrypoint scripts. Each stage addresses a specific technical requirement.</p>
            <div class="not-prose grid md:grid-cols-2 gap-6 my-8">
                <Card icon="fa-brands fa-docker" title="Dockerfile & Dependencies" blurb="Starts with Ubuntu 24.04, installs the F5 client, and creates a symbolic link for the missing libxml2.so.2 library." href="#!" />
                <Card icon="fa-solid fa-desktop" title="GUI & Browser Setup" blurb="Installs a virtual display (Xvfb), VNC server, and browsers like Firefox using official non-snap installation methods." href="#!" />
                <Card icon="fa-solid fa-robot" title="VPN Automation" blurb="An entrypoint script uses the `f5fpc` command-line tool to establish the VPN connection, passing credentials via environment variables." href="#!" />
                <Card icon="fa-solid fa-network-wired" title="Docker Networking" blurb="The container is run with `--cap-add=NET_ADMIN`. To avoid IP conflicts, using `--net=host` is the simplest solution for routing." href="#!" />
            </div>
        </section>

        <section id="troubleshooting">
            <h2 class="!text-3xl !mb-6">Key Troubleshooting Steps</h2>
            <p>Two issues account for nearly all common failures with this setup:</p>
            <ul class="list-decimal !pl-5 space-y-4">
                <li>
                    <strong>`libxml2.so.2` Not Found:</strong> This is expected on modern Ubuntu. You must manually create a symlink in your Dockerfile from an existing `libxml2.so` version to the name the F5 client expects.
                    <div class="text-sm p-3 bg-gray-100 dark:bg-slate-800 rounded-md mt-2 font-mono">ln -s /usr/lib/x86_64-linux-gnu/libxml2.so.2.9.14 /usr/lib/x86_64-linux-gnu/libxml2.so.2</div>
                </li>
                <li>
                    <strong>VPN Connection Resets:</strong> This indicates an IP address conflict. The Docker container's default network (e.g., `172.17.0.0/16`) is likely clashing with your corporate VPN's IP range. The most reliable fix is to run the container with the `--net=host` flag.
                </li>
            </ul>
        </section>
    </div>

    <div class="text-center mt-16">
        <BaseLink href="/" text="Back to Home" style="secondary" icon="fa-solid fa-arrow-left" />
    </div>
</BaseLayout>

<!-- Page-specific styles for the scrollspy nav -->
<style>
  .nav-link {
    @apply text-gray-600 dark:text-slate-300 hover:text-blue-600 dark:hover:text-blue-400 transition-colors py-1 border-b-2 border-transparent;
  }
  .nav-link.active {
    @apply text-blue-600 dark:text-blue-400 border-blue-600 dark:border-blue-400 font-semibold;
  }
</style>

<!-- Page-specific scrollspy script, same as the one on the math page -->
<script>
    document.addEventListener('DOMContentLoaded', () => {
        const navLinks = document.querySelectorAll('a.nav-link[href^="#"]');
        const sections = document.querySelectorAll('section[id]');
        const header = document.querySelector('header.sticky');
        const headerHeight = header ? header.offsetHeight : 72;

        if (navLinks.length === 0 || sections.length === 0) return;

        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    const id = entry.target.getAttribute('id');
                    navLinks.forEach(link => {
                        link.classList.remove('active');
                        if (link.getAttribute('href') === `#${id}`) {
                            link.classList.add('active');
                        }
                    });
                }
            });
        }, { rootMargin: `-${headerHeight}px 0px -70% 0px` });

        sections.forEach(section => observer.observe(section));

         navLinks.forEach(anchor => {
            anchor.addEventListener('click', function (e) {
                e.preventDefault();
                const targetId = this.getAttribute('href');
                const targetElement = document.querySelector(targetId);
                if (targetElement) {
                    const elementPosition = targetElement.getBoundingClientRect().top;
                    const offsetPosition = elementPosition + window.scrollY - headerHeight;
                
                    window.scrollTo({ top: offsetPosition, behavior: "smooth" });
                }
            });
        });
    });
</script>
