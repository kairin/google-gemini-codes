---
import BaseLayout from '@/layouts/BaseLayout.astro';
import ContentHeader from '@/components/ContentHeader.astro';
import Card from '@/components/Card.astro';
import BaseLink from '@/components/BaseLink.astro';

// Data for the SVG chart. This can be easily updated.
const chartData = [
    { label: 'Base OS (Ubuntu)', value: 20, color: 'stroke-blue-400' },
    { label: 'F5 Client', value: 25, color: 'stroke-emerald-400' },
    { label: 'VNC/noVNC', value: 20, color: 'stroke-yellow-400' },
    { label: 'Web Browser', value: 20, color: 'stroke-violet-400' },
    { label: 'Automation Scripts', value: 15, color: 'stroke-red-400' },
];

// SVG calculations
const radius = 80;
const circumference = 2 * Math.PI * radius;
let accumulatedAngle = -90; // Start at the top

const segments = chartData.map(item => {
    const dasharray = (item.value / 100) * circumference;
    const rotation = accumulatedAngle;
    accumulatedAngle += (item.value / 100) * 360; // Update for the next segment
    return {
        ...item,
        dasharray: `${dasharray} ${circumference}`,
        rotation: `rotate(${rotation} 100 100)`
    };
});
---
<BaseLayout 
    title="Dockerized F5 VPN Solution"
    description="A technical deep-dive into containerizing the F5 BIG-IP APM client for streamlined and secure intranet access."
>
    <ContentHeader
        title="Dockerized F5 VPN Solution"
        description="A technical deep-dive into containerizing the F5 BIG-IP APM client for streamlined and secure intranet access."
    />

    <header class="bg-white/80 dark:bg-slate-900/80 backdrop-blur-lg sticky top-[72px] z-40 border-b dark:border-slate-700 -mx-4 px-4 mb-12">
        <div class="container mx-auto flex justify-center items-center py-3">
            <nav class="flex flex-wrap justify-center items-center gap-x-4 sm:gap-x-6 text-sm sm:text-base">
                <a href="#overview" class="nav-link active">Overview</a>
                <a href="#challenge" class="nav-link">The Challenge</a>
                <a href="#architecture" class="nav-link">Architecture</a>
                <a href="#implementation" class="nav-link">Implementation</a>
                <a href="#troubleshooting" class="nav-link">Troubleshooting</a>
            </nav>
        </div>
    </header>

    <div class="max-w-4xl mx-auto prose dark:prose-invert prose-lg space-y-12">
        <section id="overview">
            <h2 class="!text-3xl !mb-6">Solution at a Glance</h2>
            <p>This guide details a robust, automated method for establishing secure access to an office intranet via an F5 BIG-IP APM VPN client within a Docker container. The solution integrates a modern web browser into a self-contained, portable environment, accessible through a web-based graphical interface.</p>
            
            <div class="not-prose grid md:grid-cols-2 gap-8 my-8 items-center">
                <div>
                    <h3 class="text-xl font-semibold mb-3">Key Architectural Components</h3>
                    <p class="text-gray-700 dark:text-gray-300 mb-4">The solution is built on a layered architecture that encapsulates all dependencies within a single, portable Docker container.</p>
                    <ul class="space-y-3 text-gray-700 dark:text-slate-300">
                         {chartData.map((item, index) => (
                            <li class="flex items-center">
                                <span class:list={['w-4 h-4 rounded-full mr-3', item.color.replace('stroke', 'bg')]}></span>
                                {item.label} ({item.value}%)
                            </li>
                        ))}
                    </ul>
                </div>
                <!-- Interactive SVG Donut Chart -->
                <div id="svg-chart-container" class="relative">
                    <svg viewBox="0 0 200 200" class="w-full max-w-sm mx-auto transform -rotate-90">
                        {segments.map(segment => (
                            <circle
                                cx="100" cy="100"
                                r={radius}
                                fill="transparent"
                                stroke-width="25"
                                stroke-dasharray={segment.dasharray}
                                class:list={["svg-segment", segment.color]}
                                transform={segment.rotation}
                                data-label={segment.label}
                                data-value={`${segment.value}%`}
                            />
                        ))}
                    </svg>
                    <div id="svg-tooltip" class="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 p-2 bg-slate-800 text-white text-sm rounded-md shadow-lg pointer-events-none opacity-0 transition-opacity duration-200">
                        Tooltip
                    </div>
                </div>
            </div>
        </section>

        <section id="challenge">
            <h2 class="!text-3xl !mb-6">The Challenge: Why F5 is Different</h2>
            <p>Containerizing the F5 client requires understanding its unique characteristics. Unlike modern tools, it is not a simple command-line utility and presents several technical hurdles on systems like Ubuntu 24.04 LTS.</p>
        </section>

        <section id="architecture">
            <h2 class="!text-3xl !mb-6">Architectural Decision: VNC vs. X11</h2>
            <p>The core architectural choice is how to provide a GUI from a headless container. We strongly recommend the VNC approach for its robustness and portability over the brittle, platform-dependent X11 forwarding method.</p>
        </section>

        <section id="implementation">
            <h2 class="!text-3xl !mb-6">Implementation Highlights</h2>
            <div class="not-prose grid md:grid-cols-2 gap-6 my-8">
                <Card icon="fa-brands fa-docker" title="Dockerfile & Dependencies" blurb="Starts with Ubuntu 24.04, installs the F5 client, and creates a symbolic link for the missing libxml2.so.2 library." href="#!" />
                <Card icon="fa-solid fa-desktop" title="GUI & Browser Setup" blurb="Installs a virtual display (Xvfb), VNC server, and browsers like Firefox using official non-snap installation methods." href="#!" />
                <Card icon="fa-solid fa-robot" title="VPN Automation" blurb="An entrypoint script uses the `f5fpc` command-line tool to establish the VPN connection, passing credentials securely via environment variables." href="#!" />
                <Card icon="fa-solid fa-network-wired" title="Docker Networking" blurb="The container is run with --cap-add=NET_ADMIN. To avoid IP conflicts, using --net=host is the simplest solution for routing." href="#!" />
            </div>
        </section>

        <section id="troubleshooting">
            <h2 class="!text-3xl !mb-6">Key Troubleshooting Steps</h2>
            <p>Two issues account for nearly all common failures with this setup: `libxml2.so.2` not being found and IP address conflicts between Docker and the corporate VPN. Both are solvable with specific configuration steps in the Dockerfile and at runtime.</p>
        </section>
    </div>

    <div class="text-center mt-16">
        <BaseLink href="/" text="Back to Home" style="secondary" icon="fa-solid fa-arrow-left" />
    </div>
</BaseLayout>

<style is:global>
  .nav-link { @apply text-gray-600 dark:text-slate-300 hover:text-blue-600 dark:hover:text-blue-400 transition-colors py-1 border-b-2 border-transparent; }
  .nav-link.active { @apply text-blue-600 dark:text-blue-400 border-blue-600 dark:border-blue-400 font-semibold; }
  .svg-segment {
      transition: all 0.2s ease-in-out;
      stroke-linecap: round;
  }
  .svg-segment:hover {
      transform-origin: center;
      transform: scale(1.05);
      opacity: 0.8;
  }
</style>

<script>
    // Scrollspy Navigation Script (unchanged)
    document.addEventListener('DOMContentLoaded', () => {
        const navLinks = document.querySelectorAll('a.nav-link[href^="#"]');
        const sections = document.querySelectorAll('section[id]');
        const header = document.querySelector('header.sticky');
        const headerHeight = header ? header.offsetHeight : 72;
        if (navLinks.length === 0 || sections.length === 0) return;
        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    const id = entry.target.getAttribute('id');
                    navLinks.forEach(link => {
                        link.classList.toggle('active', link.getAttribute('href') === `#${id}`);
                    });
                }
            });
        }, { rootMargin: `-${headerHeight}px 0px -70% 0px` });
        sections.forEach(section => observer.observe(section));
         navLinks.forEach(anchor => {
            anchor.addEventListener('click', function (e) {
                e.preventDefault();
                const targetId = this.getAttribute('href');
                const targetElement = document.querySelector(targetId);
                if (targetElement) {
                    const elementPosition = targetElement.getBoundingClientRect().top;
                    const offsetPosition = elementPosition + window.scrollY - headerHeight;
                    window.scrollTo({ top: offsetPosition, behavior: "smooth" });
                }
            });
        });

        // SVG Tooltip Script
        const segments = document.querySelectorAll('.svg-segment');
        const tooltip = document.getElementById('svg-tooltip');
        if(tooltip) {
            segments.forEach(segment => {
                segment.addEventListener('mousemove', (e) => {
                    const label = e.target.getAttribute('data-label');
                    const value = e.target.getAttribute('data-value');
                    tooltip.innerHTML = `${label}: ${value}`;
                    tooltip.style.opacity = '1';
                });
                segment.addEventListener('mouseleave', () => {
                    tooltip.style.opacity = '0';
                });
            });
        }
    });
</script>
