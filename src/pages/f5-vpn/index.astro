---
import BaseLayout from '@/layouts/BaseLayout.astro';
import ContentHeader from '@/components/ContentHeader.astro';
import Card from '@/components/Card.astro';
import BaseLink from '@/components/BaseLink.astro';

// Data for the new Stacked Block Chart
const componentData = [
    { label: 'F5 Client', value: 25, color: 'bg-emerald-500', highlight: 'hover:bg-emerald-400' },
    { label: 'Base OS (Ubuntu)', value: 20, color: 'bg-blue-500', highlight: 'hover:bg-blue-400' },
    { label: 'VNC/noVNC', value: 20, color: 'bg-yellow-500', highlight: 'hover:bg-yellow-400' },
    { label: 'Web Browser', value: 20, color: 'bg-violet-500', highlight: 'hover:bg-violet-400' },
    { label: 'Automation Scripts', value: 15, color: 'bg-red-500', highlight: 'hover:bg-red-400' },
];
---
<BaseLayout 
    title="Dockerized F5 VPN Solution"
    description="A technical deep-dive into containerizing the F5 BIG-IP APM client for streamlined and secure intranet access."
>
    <ContentHeader
        title="Dockerized F5 VPN Solution"
        description="A technical deep-dive into containerizing the F5 BIG-IP APM client for streamlined and secure intranet access."
    />

    <header class="bg-white/80 dark:bg-slate-900/80 backdrop-blur-lg sticky top-[72px] z-40 border-b dark:border-slate-700 -mx-4 px-4 mb-12">
        <div class="container mx-auto flex justify-center items-center py-3">
            <nav class="flex flex-wrap justify-center items-center gap-x-4 sm:gap-x-6 text-sm sm:text-base">
                <a href="#overview" class="nav-link active">Overview</a>
                <a href="#challenge" class="nav-link">The Challenge</a>
                <a href="#architecture" class="nav-link">Architecture</a>
                <a href="#implementation" class="nav-link">Implementation</a>
                <a href="#troubleshooting" class="nav-link">Troubleshooting</a>
            </nav>
        </div>
    </header>

    <div class="max-w-4xl mx-auto prose dark:prose-invert prose-lg space-y-12">

        <!-- Section 1: Overview with the new Stacked Block Chart -->
        <section id="overview">
            <h2 class="!text-3xl !mb-6">Solution at a Glance</h2>
            <p>This guide details a robust, automated method for establishing secure access to an office intranet via an F5 BIG-IP APM VPN client within a Docker container. The solution integrates a modern web browser into a self-contained, portable environment, accessible through a web-based graphical interface.</p>
            
            <div class="not-prose grid md:grid-cols-2 gap-8 my-8 items-center">
                <!-- Interactive Legend -->
                <div>
                    <h3 class="text-xl font-semibold mb-4">Key Architectural Components</h3>
                    <ul id="stacked-bar-legend" class="space-y-2">
                        {componentData.map(item => (
                            <li class="flex items-center p-2 rounded-md transition-colors duration-200 cursor-pointer" data-label={item.label}>
                                <span class:list={['w-3 h-3 rounded-full mr-3', item.color]}></span>
                                <span class="legend-label text-gray-700 dark:text-slate-300">{item.label}</span>
                                <span class="ml-auto font-mono text-sm text-gray-500 dark:text-slate-400">{item.value}%</span>
                            </li>
                        ))}
                    </ul>
                </div>
                
                <!-- NEW Stacked Block Chart -->
                <div class="w-full">
                    <div id="stacked-bar-container" class="w-full h-12 flex rounded-lg overflow-hidden shadow-lg border border-slate-200 dark:border-slate-700">
                        {componentData.map(item => (
                            <div
                                class:list={["bar-segment", item.color, "h-full transition-all duration-300 ease-in-out flex items-center justify-center text-white font-bold text-lg"]}
                                style={`width: ${item.value}%;`}
                                data-label={item.label}
                                title={`${item.label}: ${item.value}%`}
                            >
                                <span class="segment-label opacity-0 scale-75 transition-all duration-300">{item.value}%</span>
                            </div>
                        ))}
                    </div>
                </div>
            </div>
        </section>

        <!-- Other sections remain unchanged -->
        <section id="challenge">
            <h2 class="!text-3xl !mb-6">The Challenge: Why F5 is Different</h2>
            <p>Containerizing the F5 client requires understanding its unique characteristics. Unlike modern tools, it is not a simple command-line utility and presents several technical hurdles on systems like Ubuntu 24.04 LTS.</p>
        </section>

        <section id="architecture">
            <h2 class="!text-3xl !mb-6">Architectural Decision: VNC vs. X11</h2>
            <p>The core architectural choice is how to provide a GUI from a headless container. We strongly recommend the VNC approach for its robustness and portability over the brittle, platform-dependent X11 forwarding method.</p>
        </section>

        <section id="implementation">
            <h2 class="!text-3xl !mb-6">Implementation Highlights</h2>
            <div class="not-prose grid md:grid-cols-2 gap-6 my-8">
                <Card icon="fa-brands fa-docker" title="Dockerfile & Dependencies" blurb="Starts with Ubuntu 24.04, installs the F5 client, and creates a symbolic link for the missing libxml2.so.2 library." href="#!" />
                <Card icon="fa-solid fa-desktop" title="GUI & Browser Setup" blurb="Installs a virtual display (Xvfb), VNC server, and browsers like Firefox using official non-snap installation methods." href="#!" />
                <Card icon="fa-solid fa-robot" title="VPN Automation" blurb="An entrypoint script uses the `f5fpc` command-line tool to establish the VPN connection, passing credentials securely via environment variables." href="#!" />
                <Card icon="fa-solid fa-network-wired" title="Docker Networking" blurb="The container is run with --cap-add=NET_ADMIN. To avoid IP conflicts, using --net=host is the simplest solution for routing." href="#!" />
            </div>
        </section>

        <section id="troubleshooting">
            <h2 class="!text-3xl !mb-6">Key Troubleshooting Steps</h2>
            <p>Two issues account for nearly all common failures with this setup: `libxml2.so.2` not being found and IP address conflicts between Docker and the corporate VPN. Both are solvable with specific configuration steps in the Dockerfile and at runtime.</p>
        </section>
    </div>

    <div class="text-center mt-16">
        <BaseLink href="/" text="Back to Home" style="secondary" icon="fa-solid fa-arrow-left" />
    </div>
</BaseLayout>

<style is:global>
  /* Scrollspy Nav styles */
  .nav-link { @apply text-gray-600 dark:text-slate-300 hover:text-blue-600 dark:hover:text-blue-400 transition-colors py-1 border-b-2 border-transparent; }
  .nav-link.active { @apply text-blue-600 dark:text-blue-400 border-blue-600 dark:border-blue-400 font-semibold; }

  /* Stacked Bar Chart Interactive Styles */
  #stacked-bar-container.highlight .bar-segment {
    @apply opacity-50;
  }
  #stacked-bar-container.highlight .bar-segment.highlight {
    @apply opacity-100 scale-105 z-10;
  }
  #stacked-bar-container.highlight .bar-segment.highlight .segment-label {
    @apply opacity-100 scale-100;
  }
  #stacked-bar-legend li.highlight {
    @apply bg-gray-100 dark:bg-slate-700/50;
  }
</style>

<script>
    // Scrollspy Navigation Script
    document.addEventListener('DOMContentLoaded', () => {
        const navLinks = document.querySelectorAll('a.nav-link[href^="#"]');
        const sections = document.querySelectorAll('section[id]');
        const header = document.querySelector('header.sticky');
        const headerHeight = header ? header.offsetHeight : 72;
        if (navLinks.length === 0 || sections.length === 0) return;
        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    const id = entry.target.getAttribute('id');
                    navLinks.forEach(link => {
                        link.classList.toggle('active', link.getAttribute('href') === `#${id}`);
                    });
                }
            });
        }, { rootMargin: `-${headerHeight}px 0px -70% 0px` });
        sections.forEach(section => observer.observe(section));
         navLinks.forEach(anchor => {
            anchor.addEventListener('click', function (e) {
                e.preventDefault();
                const targetId = this.getAttribute('href');
                const targetElement = document.querySelector(targetId);
                if (targetElement) {
                    const elementPosition = targetElement.getBoundingClientRect().top;
                    const offsetPosition = elementPosition + window.scrollY - headerHeight;
                    window.scrollTo({ top: offsetPosition, behavior: "smooth" });
                }
            });
        });

        // Stacked Bar Chart Interactivity Script
        const legendItems = document.querySelectorAll('#stacked-bar-legend li');
        const barSegments = document.querySelectorAll('.bar-segment');
        const chartContainer = document.getElementById('stacked-bar-container');

        function handleHighlight(label) {
            chartContainer.classList.add('highlight');
            barSegments.forEach(segment => {
                segment.classList.toggle('highlight', segment.dataset.label === label);
            });
            legendItems.forEach(item => {
                item.classList.toggle('highlight', item.dataset.label === label);
            });
        }

        function clearHighlight() {
            chartContainer.classList.remove('highlight');
            barSegments.forEach(segment => segment.classList.remove('highlight'));
            legendItems.forEach(item => item.classList.remove('highlight'));
        }

        legendItems.forEach(item => {
            item.addEventListener('mouseenter', () => handleHighlight(item.dataset.label));
            item.addEventListener('mouseleave', clearHighlight);
        });

        barSegments.forEach(segment => {
            segment.addEventListener('mouseenter', () => handleHighlight(segment.dataset.label));
            segment.addEventListener('mouseleave', clearHighlight);
        });
    });
</script>
