---
import BaseLayout from '@/layouts/BaseLayout.astro';
import ContentHeader from '@/components/ContentHeader.astro';
import Card from '@/components/Card.astro';
import BaseLink from '@/components/BaseLink.astro';

// Data for the new Area Chart. The 'value' now directly influences the flex-grow property.
const componentData = [
    { label: 'F5 Client', value: 25, color: 'bg-emerald-500', highlight: 'hover:bg-emerald-400' },
    { label: 'Base OS (Ubuntu)', value: 20, color: 'bg-blue-500', highlight: 'hover:bg-blue-400' },
    { label: 'VNC/noVNC', value: 20, color: 'bg-yellow-500', highlight: 'hover:bg-yellow-400' },
    { label: 'Web Browser', value: 20, color: 'bg-violet-500', highlight: 'hover:bg-violet-400' },
    { label: 'Automation Scripts', value: 15, color: 'bg-red-500', highlight: 'hover:bg-red-400' },
];
---
<BaseLayout 
    title="Dockerized F5 VPN Solution"
    description="A technical deep-dive into containerizing the F5 BIG-IP APM client for streamlined and secure intranet access."
>
    <ContentHeader
        title="Dockerized F5 VPN Solution"
        description="A technical deep-dive into containerizing the F5 BIG-IP APM client for streamlined and secure intranet access."
    />

    <header class="bg-white/80 dark:bg-slate-900/80 backdrop-blur-lg sticky top-[72px] z-40 border-b dark:border-slate-700 -mx-4 px-4 mb-12">
        <div class="container mx-auto flex justify-center items-center py-3">
            <nav class="flex flex-wrap justify-center items-center gap-x-4 sm:gap-x-6 text-sm sm:text-base">
                <a href="#overview" class="nav-link active">Overview</a>
                <a href="#challenge" class="nav-link">The Challenge</a>
                <a href="#architecture" class="nav-link">Architecture</a>
                <a href="#implementation" class="nav-link">Implementation</a>
                <a href="#troubleshooting" class="nav-link">Troubleshooting</a>
            </nav>
        </div>
    </header>

    <!-- Main Content Sections with improved separation -->
    <div class="space-y-8">

        <!-- Section 1: Overview with NEW chart -->
        <section id="overview" class="p-6 md:p-8 bg-white dark:bg-slate-800/50 rounded-lg border dark:border-slate-700 shadow-lg">
            <h2 class="text-3xl font-bold mb-6 text-gray-800 dark:text-slate-100">Solution at a Glance</h2>
            <p class="text-lg text-gray-600 dark:text-slate-300 mb-8">This guide details a robust, automated method for containerizing the F5 VPN client. The solution encapsulates all dependencies into a portable environment accessible from any web browser.</p>
            
            <div class="grid md:grid-cols-5 gap-8 items-center">
                <div class="md:col-span-2">
                    <h3 class="text-xl font-semibold mb-4">Key Architectural Components</h3>
                    <ul id="area-chart-legend" class="space-y-2">
                        {componentData.map(item => (
                            <li class="flex items-center p-2 rounded-md transition-colors duration-200 cursor-pointer" data-label={item.label}>
                                <span class:list={['w-3 h-3 rounded-full mr-3', item.color]}></span>
                                <span class="legend-label text-gray-700 dark:text-slate-300">{item.label}</span>
                                <span class="ml-auto font-mono text-sm text-gray-500 dark:text-slate-400">{item.value}%</span>
                            </li>
                        ))}
                    </ul>
                </div>
                
                <div id="area-chart-container" class="md:col-span-3 min-h-[250px] flex flex-wrap gap-1 p-2 bg-slate-200 dark:bg-slate-900 rounded-lg">
                    {componentData.map(item => (
                        <div
                            class:list={["area-block", item.color, item.highlight, "h-full rounded-md transition-all duration-300 ease-in-out flex items-center justify-center text-white font-bold text-lg"]}
                            style={`flex-grow: ${item.value};`}
                            data-label={item.label}
                        >
                           <span class="block-label opacity-0 transition-opacity duration-300">{item.value}%</span>
                        </div>
                    ))}
                </div>
            </div>
        </section>

        <!-- Other Sections, now wrapped in styled containers -->
        <section id="challenge" class="p-6 md:p-8 bg-white dark:bg-slate-800/50 rounded-lg border dark:border-slate-700 shadow-lg">
            <h2 class="text-3xl font-bold mb-6 text-gray-800 dark:text-slate-100">The Challenge: Why F5 is Different</h2>
            <p class="text-lg text-gray-600 dark:text-slate-300">Containerizing the F5 client requires understanding its unique dependencies, which present hurdles on modern Linux systems. It is not a simple command-line utility and depends on a graphical environment and legacy libraries.</p>
        </section>

        <section id="architecture" class="p-6 md:p-8 bg-white dark:bg-slate-800/50 rounded-lg border dark:border-slate-700 shadow-lg">
            <h2 class="text-3xl font-bold mb-6 text-gray-800 dark:text-slate-100">Architectural Decision: VNC vs. X11</h2>
            <p class="text-lg text-gray-600 dark:text-slate-300">The core choice is providing a GUI from a headless container. We strongly recommend the VNC approach for its robustness and portability over the brittle, platform-dependent X11 forwarding method.</p>
        </section>

        <section id="implementation" class="p-6 md:p-8 bg-white dark:bg-slate-800/50 rounded-lg border dark:border-slate-700 shadow-lg">
            <h2 class="text-3xl font-bold mb-6 text-gray-800 dark:text-slate-100">Implementation Highlights</h2>
            <div class="grid md:grid-cols-2 gap-6">
                <Card icon="fa-brands fa-docker" title="Dockerfile & Dependencies" blurb="Starts with Ubuntu 24.04, installs the F5 client, and creates a symbolic link for the missing libxml2.so.2 library." href="#!" />
                <Card icon="fa-solid fa-desktop" title="GUI & Browser Setup" blurb="Installs a virtual display (Xvfb), VNC server, and browsers like Firefox using official non-snap installation methods." href="#!" />
                <Card icon="fa-solid fa-robot" title="VPN Automation" blurb="An entrypoint script uses the `f5fpc` command-line tool to establish the VPN connection, passing credentials securely via environment variables." href="#!" />
                <Card icon="fa-solid fa-network-wired" title="Docker Networking" blurb="The container is run with --cap-add=NET_ADMIN. To avoid IP conflicts, using --net=host is the simplest solution for routing." href="#!" />
            </div>
        </section>
    </div>

    <div class="text-center my-16">
        <BaseLink href="/" text="Back to Home" style="secondary" icon="fa-solid fa-arrow-left" />
    </div>
</BaseLayout>

<style is:global>
  /* Scrollspy Nav styles */
  .nav-link { @apply text-gray-600 dark:text-slate-300 hover:text-blue-600 dark:hover:text-blue-400 transition-colors py-1 border-b-2 border-transparent; }
  .nav-link.active { @apply text-blue-600 dark:text-blue-400 border-blue-600 dark:border-blue-400 font-semibold; }

  /* Area Chart Interactive Styles */
  #area-chart-container.highlight .area-block {
    flex-grow: 1 !important; /* Shrink non-highlighted blocks */
    opacity: 0.5;
  }
  #area-chart-container.highlight .area-block.highlight {
    flex-grow: 40 !important; /* Dramatically expand highlighted block */
    opacity: 1;
  }
   #area-chart-container.highlight .area-block.highlight .block-label {
    opacity: 1;
   }
  #area-chart-legend li.highlight {
    @apply bg-gray-100 dark:bg-slate-700/50;
  }
</style>

<script>
    // Scrollspy Navigation Script
    document.addEventListener('DOMContentLoaded', () => {
        const navLinks = document.querySelectorAll('a.nav-link[href^="#"]');
        const sections = document.querySelectorAll('section[id]');
        const header = document.querySelector('header.sticky');
        const headerHeight = header ? header.offsetHeight : 72;
        if (navLinks.length === 0 || sections.length === 0) return;
        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    const id = entry.target.getAttribute('id');
                    navLinks.forEach(link => {
                        link.classList.toggle('active', link.getAttribute('href') === `#${id}`);
                    });
                }
            });
        }, { rootMargin: `-${headerHeight}px 0px -70% 0px` });
        sections.forEach(section => observer.observe(section));
         navLinks.forEach(anchor => {
            anchor.addEventListener('click', function (e) {
                e.preventDefault();
                const targetId = this.getAttribute('href');
                const targetElement = document.querySelector(targetId);
                if (targetElement) {
                    const elementPosition = targetElement.getBoundingClientRect().top;
                    const offsetPosition = elementPosition + window.scrollY - headerHeight;
                    window.scrollTo({ top: offsetPosition, behavior: "smooth" });
                }
            });
        });

        // Area Chart Interactivity Script
        const legendItems = document.querySelectorAll('#area-chart-legend li');
        const areaBlocks = document.querySelectorAll('.area-block');
        const chartContainer = document.getElementById('area-chart-container');

        function handleHighlight(label) {
            chartContainer.classList.add('highlight');
            areaBlocks.forEach(block => {
                block.classList.toggle('highlight', block.dataset.label === label);
            });
            legendItems.forEach(item => {
                item.classList.toggle('highlight', item.dataset.label === label);
            });
        }

        function clearHighlight() {
            chartContainer.classList.remove('highlight');
            areaBlocks.forEach(block => block.classList.remove('highlight'));
            legendItems.forEach(item => item.classList.remove('highlight'));
        }

        legendItems.forEach(item => {
            item.addEventListener('mouseenter', () => handleHighlight(item.dataset.label));
            item.addEventListener('mouseleave', clearHighlight);
        });
    });
</script>
